@page "/edit"
@using NewDyCalcWasm.Helpers
@inject MealService MealService
@inject StorageService StorageService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="container mt-5">
    <h1>Box</h1>
    <div id="boxTableContainer" class="table-responsive">
        <table class="table table-striped table-hover moveable">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Position</th>
                    <th>Name</th>
                    <th>Pieces Per Carton Box</th>
                    <th>Pieces Per Plastic Case</th>
                    <th>Color</th>
                    @if (enableOptions)
                    {
                        <th class="text-center">Edit</th>
                        <th class="text-center">Delete</th>
                    }
                </tr>
            </thead>
            <tbody>
                @if (mealsInfo != null)
                {
                    @foreach (var mealInfo in _mealBoxes)
                    {
                        <tr class="moveable">
                            <td>@mealInfo.BoxId</td>
                            <td>@mealInfo.BoxPosition</td>
                            <td>@mealInfo.BoxName</td>
                            <td>@mealInfo.BoxPiecesPerCartonBox</td>
                            <td>@mealInfo.BoxPiecesPerPlasticCase</td>
                            <td><div style="width:50px; height:20px; background-color:@mealInfo.BoxColor"></div></td>
                            @if (enableOptions)
                            {
                                <th class="text-center">
                                    <i @onclick="@(() => EditItem(mealInfo.BoxId))" style="cursor:pointer" class="d-inline-block fa-solid fa-edit text-success mr-2"></i>
                                </th>
                                <th class="text-center">
                                    <i @onclick="@(() => Delete(mealInfo.BoxId))" style="cursor:pointer" class="d-inline-block fa-solid fa-trash text-danger"></i>
                                </th>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    <h1>Hotmeals</h1>
    <div id="hotMealsTableContainer" class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Position</th>
                    <th>Name</th>
                    <th>Pieces Per Carton Box</th>
                    <th>Pieces Per Plastic Case</th>
                    <th>Color</th>
                </tr>
            </thead>
            <tbody>
                @if (mealsInfo != null)
                {
                    @foreach (var mealInfo in _hotMeals)
                    {
                        <tr>
                            <td>@mealInfo.HotMealId</td>
                            <td>@mealInfo.HotMealPosition</td>
                            <td>@mealInfo.HotMealName</td>
                            <td>@mealInfo.HotMealPiecesPerCartonBox</td>
                            <td>@mealInfo.HotMealPiecesPerPlasticCase</td>
                            <td><div style="width:50px; height:20px; background-color:@mealInfo.BoxColor"></div></td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <div class="row d-flex justify-content-between">
        <div class="col">
            <DownloadButton />
            <LoadButton />
        </div>
        <div class="d-flex gap-2 col justify-content-end">
            @if (!enableOptions)
            {
                <button @onclick="@(() => ToggleOptions(true))" class="btn btn-success text-white">Enable edit</button>
            }
            else
            {
                <button @onclick="@(() => ToggleOptions(false))" class="btn btn-success text-white">Disable edit</button>
                <button @onclick="CreateNewItem" class="btn btn-danger">Add new</button>
            }
        </div>
    </div>
</div>

<style>
    #mealsTableContainer {
        max-width: 100%;
        overflow-x: auto;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-radius: 4px;
    }

    table {
        white-space: nowrap;
    }

    thead {
        background-color: #007BFF;
        color: white;
    }

    .moveable {
        user-select: none;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
    }

        .moveable:hover {
            background-color: #f2f2f2;
            cursor: move;
        }

    th, td {
        text-align: left;
        padding: 8px 12px;
    }
</style>

@code {
    [Parameter]
    public string Password { get; set; } = string.Empty;

    bool enableOptions = false;

    List<MealInfo> mealsInfo;
    private DotNetObjectReference<Edit> _objectReference;

    List<MealBox> _mealBoxes = new List<MealBox>();
    List<HotMeals> _hotMeals = new List<HotMeals>();

    protected override async Task OnInitializedAsync()
    {
        if (Password == "gg")
            enableOptions = true;

        MealService.OnAnyActionTaken += RefreshList;
        mealsInfo = await StorageService.LoadItems();

        if (mealsInfo == null)
            return;

        foreach (var meal in mealsInfo)
        {
            _mealBoxes.Add(new MealBox
                {
                    BoxId = meal.BoxId,
                    BoxColor = meal.BoxColor,
                    BoxName = meal.BoxName,
                    BoxPiecesPerCartonBox = meal.BoxPiecesPerCartonBox,
                    BoxPiecesPerPlasticCase = meal.BoxPiecesPerPlasticCase,
                    BoxPosition = meal.BoxPosition
                });

            _hotMeals.Add(new HotMeals
                {
                    BoxColor = meal.BoxColor,
                    HotMealId = meal.HotMealId,
                    HotMealName = meal.HotMealName,
                    HotMealPiecesPerCartonBox = meal.HotMealPiecesPerCartonBox,
                    HotMealPiecesPerPlasticCase = meal.HotMealPiecesPerPlasticCase,
                    HotMealPosition = meal.HotMealPosition
                });
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && enableOptions)
        {
            _objectReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("sortableHelper.initSortable", "boxTableContainer", _objectReference);
        }
    }

    private async Task ToggleOptions(bool enable)
    {
        enableOptions = enable;

        if (enableOptions)
        {
            _objectReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("sortableHelper.initSortable", "boxTableContainer", _objectReference);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("sortableHelper.destroySortable", "boxTableContainer");
        }

        StateHasChanged();
    }

    [JSInvokable("UpdateMealInfo")]
    public async Task UpdateMealInfo(int oldIndex, int newIndex)
    {
        await StorageService.SwapIds(oldIndex, newIndex);
        mealsInfo = await StorageService.LoadItems();
        _mealBoxes = new List<MealBox>();
        _hotMeals = new List<HotMeals>();

        foreach (var meal in mealsInfo)
        {
            _mealBoxes.Add(new MealBox
                {
                    BoxId = meal.BoxId,
                    BoxColor = meal.BoxColor,
                    BoxName = meal.BoxName,
                    BoxPiecesPerCartonBox = meal.BoxPiecesPerCartonBox,
                    BoxPiecesPerPlasticCase = meal.BoxPiecesPerPlasticCase,
                    BoxPosition = meal.BoxPosition
                });

            _hotMeals.Add(new HotMeals
                {
                    BoxColor = meal.BoxColor,
                    HotMealId = meal.HotMealId,
                    HotMealName = meal.HotMealName,
                    HotMealPiecesPerCartonBox = meal.HotMealPiecesPerCartonBox,
                    HotMealPiecesPerPlasticCase = meal.HotMealPiecesPerPlasticCase,
                    HotMealPosition = meal.HotMealPosition
                });
        }

        await InvokeAsync(StateHasChanged);
    }

    async Task CreateNewItem()
    {
        MealService.Show();
    }

    async Task RefreshList()
    {
        mealsInfo = await StorageService.LoadItems();
        if (mealsInfo == null)
            return;

        _mealBoxes = new List<MealBox>();
        _hotMeals = new List<HotMeals>();

        foreach (var meal in mealsInfo)
        {
            _mealBoxes.Add(new MealBox
                {
                    BoxId = meal.BoxId,
                    BoxColor = meal.BoxColor,
                    BoxName = meal.BoxName,
                    BoxPiecesPerCartonBox = meal.BoxPiecesPerCartonBox,
                    BoxPiecesPerPlasticCase = meal.BoxPiecesPerPlasticCase,
                    BoxPosition = meal.BoxPosition
                });

            _hotMeals.Add(new HotMeals
                {
                    BoxColor = meal.BoxColor,
                    HotMealId = meal.HotMealId,
                    HotMealName = meal.HotMealName,
                    HotMealPiecesPerCartonBox = meal.HotMealPiecesPerCartonBox,
                    HotMealPiecesPerPlasticCase = meal.HotMealPiecesPerPlasticCase,
                    HotMealPosition = meal.HotMealPosition
                });
        }

        await InvokeAsync(StateHasChanged);
    }

    async Task Delete(string boxId)
    {
        bool result = await JSRuntime.InvokeAsync<bool>("confirmDialog", "Are you sure you want to proceed?");

        if (result)
        {
            await StorageService.DeleteItem(boxId);
        }
    }

    async Task EditItem(string mealBoxId)
    {
        var item = await StorageService.LoadItem(mealBoxId);
        MealService.Show(item);
    }

    public void Dispose()
    {
        MealService.OnAnyActionTaken -= RefreshList;
    }

    public class MealBox
    {
        public string BoxId { get; set; } = string.Empty;
        public string BoxPosition { get; set; } = string.Empty;
        public string BoxName { get; set; } = string.Empty;
        public int? BoxPiecesPerCartonBox { get; set; }
        public int? BoxPiecesPerPlasticCase { get; set; }
        public string BoxColor { get; set; } = string.Empty;
    }

    public class HotMeals
    {
        public string HotMealId { get; set; } = string.Empty;
        public string HotMealPosition { get; set; } = string.Empty;
        public string HotMealName { get; set; } = string.Empty;
        public int? HotMealPiecesPerCartonBox { get; set; }
        public int? HotMealPiecesPerPlasticCase { get; set; }
        public string BoxColor { get; set; } = string.Empty;
    }
}
