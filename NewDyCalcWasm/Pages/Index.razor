@page "/"
@using NewDyCalcWasm.Data
@inject StorageService StorageService
@inject IJSRuntime JSRuntime

<PageTitle>Dy Calc</PageTitle>




<div class="container mb-4" style="font-size:0.75rem; font-weight:bold">
    @if (state == 0)
    {
      @* <div class="row justify-content-center mt-5">
            <h4 class="text-center">DY Short Flights</h4>

            <div class="col-6 d-lg-block py-2">
                <div class="border rounded shadow-sm p-3">
                    <h6 class="text-muted mb-1 pt-2">
                        <p><b class="mb-1">Instructions :</b></p>
                       <p class="my-1">Day 1</p>
                        <p class="mt-1 mb-0">
                            1. Open Production plans on date <b style="cursor:pointer" @onclick="FirstLink">

                                    @(
                            DateTime.UtcNow.Date.AddDays(1).ToString("dd/MM")
                                        )
                       
                            </b>
                        </p>
                        <p>2. Take info from <b class="text-primary">21:00h</b> cuttlery button and write it down in input fields</p>
                        <p class="my-1">Day 2</p>
                        <p class="mt-1 mb-0">1. Open Production plans on date <b style="cursor:pointer" @onclick="SecondLink">@(
                         DateTime.UtcNow.Date.AddDays(2).ToString("dd/MM")
                                       )
                              
                            </b>
                        </p>
                        <p>2. Take info from <b class="text-primary">10:00h</b> cuttlery button and write it down in input fields</p>
                    </h6>
                </div>
            </div>
    </div>*@
        @if(mealsInput is not null)
        {
            <div class="row justify-content-center mt-5 fw-bold">
                <div class="col-6 col-md-5 col-lg-3">
                    <div class="border rounded shadow-sm p-3">
                        @* <h3 class="text-center pb-1">Day 1</h3>*@
                        @foreach (var mealInput in mealsInput)
                        {
                            <h6 class="text-center fw-bold mb-0">@mealInput.BoxName</h6>
                            <input @bind-value="mealInput.FirstDayMealQuantity" type="number" class="border rounded p-2 form-control mb-2" />
                        }
                    </div>
                </div>

               @* <div class="col-6 col-md-5 col-lg-3 ">
                    <div class="border rounded shadow-sm p-3">

                        <h3 class="text-center pb-1">Day 2</h3>

                        @foreach (var mealInput in mealsInput)
                        {
                            <h6 class="text-center fw-bold mb-0">@mealInput.BoxName</h6>
                            <input @bind-value="mealInput.SecondDayMealQuantity" type="number" class="border mb-2 rounded p-2 form-control" />

                        }


                    </div>
        </div>*@
            </div>
            
        }
        <div class="row justify-content-center">
            <div class="col-12 col-sm-6 col-lg-4 mt-4">
                <button class="btn btn-primary" @onclick="Calculate" style="width:100%;">Calculate</button>
            </div>
        </div>
    }
    else if (state == 1)
    {
        <div class="row justify-content-center">
            <div class="mt-2 text-center">
                <h5 class="text-center text-danger">DY Short Flights</h5>
                <h6>
                    @(
                        DateTime.UtcNow.Date.ToString("dd/MM/yy")
                        )
                </h6>
                <div class="border p-4 text-start d-inline-block">
                    <ul class="list-group mx-auto" style="width:800px;">
                        <h4 class="text-center">Mealbox</h4>
                        @foreach (var boxmeal in mealsInput)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                <span style="width:70px; display:inline-block" class="text-center border border-dark p-2">@boxmeal.BoxId</span>

                                <i class="fa-solid fa-fill-drip" style="color:@boxmeal.BoxColor"></i>
                                @boxmeal.BoxName
                                </div>
                                <div>
                                    <span class="border border-dark p-2">@((boxmeal.BoxMealsCartonBoxPick % 1 == 0) ? boxmeal.BoxMealsCartonBoxPick.ToString("#.##") : boxmeal.BoxMealsCartonBoxPick.ToString("F2"))<i class="fa-solid fa-box-open p-1"></i> </span>
                                    <span class="border border-dark p-2"> @((boxmeal.BoxMealsPlasticBoxPick % 1 == 0) ? boxmeal.BoxMealsPlasticBoxPick.ToString("#.##") : boxmeal.BoxMealsPlasticBoxPick.ToString("F2")) <img src="/css/plastic.png" width="20" /></span>
                                    <span class="border border-dark p-2"> @boxmeal.MealsPick.ToString("#.##")  </span>
                                    <span class="border border-dark p-2">@boxmeal.BoxPosition </span>
                                    <span class="border border-dark p-2"> (+@boxmeal.PercentageAddExtra%)</span>
                                   
                                    <button @onclick="@(()=>AddAmount(boxmeal))" class="btn btn-primary">+10%</button>
                                </div>
                            </li>
                        }
                    </ul>

                    <ul class="list-group mt-3 mx-auto" style="width:800px;">
                        <h4 class="text-center">Hotmeals</h4>

                        @foreach (var hotmeal in mealsInput)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                                                <div style="width:70px; display:inline-block" class="text-center border border-dark p-2">@hotmeal.HotMealId
                                                                </div>

                                <i class="fa-solid fa-fill-drip" style="color:@hotmeal.BoxColor"></i>
                                @hotmeal.HotMealName
                                </div>
                                <div>
                                    <span class="border border-dark p-2">@((hotmeal.HotMealsCartonBoxPick % 1 == 0) ? hotmeal.HotMealsCartonBoxPick.ToString("#.##") : hotmeal.HotMealsCartonBoxPick.ToString("F2"))<i class="fa-solid fa-box-open p-1"></i></span>
                                    <span class="border border-dark p-2">@((hotmeal.HotMealsPlasticBoxPick % 1 == 0) ? hotmeal.HotMealsPlasticBoxPick.ToString("#.##") : hotmeal.HotMealsPlasticBoxPick.ToString("F2"))  <img src="/css/plastic.png" width="20" /></span>
                                    <span class="border border-dark p-2"> @hotmeal.MealsPick.ToString("#.##") </span>
                                    <span class="border border-dark p-2">@hotmeal.HotMealPosition </span>

                                </div>
                            </li>

                        }
                    </ul>
                </div>
            </div>
        </div>

        <div class="row justify-content-center text-center mt-3">
            <button class="btn btn-outline-dark" @onclick="@(()=>state = 2)" style="width:400px;">Next</button>

        </div>

    }
    else if(state == 2)
    {
        <div class="row justify-content-center">
            <div class="mt-2 text-center">
               @*  <h5 class="text-center text-danger">DY Short Flights</h5>
                <h6>
                    @(
                        DateTime.UtcNow.Date.ToString("dd/MM/yy")
                        )
                </h6> *@
                <div class="border p-2 text-start d-inline-block">
                    <ul class="list-group mx-auto" style="width:900px;">
                        <h5 class="text-center fw-bolder">Mealbox</h5>
                        @foreach (var boxmeal in mealsInput)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center p-1 rounded-0">
                                <div>
                                    <span style="width:70px; display:inline-block" class="text-center border border-dark p-2">@boxmeal.BoxId</span>

                                    <i class="fa-solid fa-fill-drip" style="color:@boxmeal.BoxColor"></i>
                                    @boxmeal.BoxName
                                </div>
                                <div>
                                    <span class="border border-dark p-2">@((boxmeal.BoxMealsCartonBoxPick % 1 == 0) ? boxmeal.BoxMealsCartonBoxPick.ToString("F0") : boxmeal.BoxMealsCartonBoxPick.ToString("F2"))<i class="fa-solid fa-box-open p-1"></i> </span>
                                    <span class="border border-dark p-2"> @((boxmeal.BoxMealsPlasticBoxPick % 1 == 0) ? boxmeal.BoxMealsPlasticBoxPick.ToString("F0") : boxmeal.BoxMealsPlasticBoxPick.ToString("F2")) <img src="/css/plastic.png" width="20" /></span>
                                    <span class="border border-dark p-2 fw-bold">@(Math.Ceiling(boxmeal.MealsPick)) pcs</span>
                                    <span class="border border-dark p-2 text-success  fw-bold">@boxmeal.BoxPosition</span>
                                    <span class="border border-dark p-2 text-danger fw-bold">+@boxmeal.PercentageAddExtra%</span>
                                </div>
                            </li>
                        }
                    </ul>

                    <ul class="list-group mt-3 mx-auto" style="width:900px;">
                        <h5 class="text-center fw-bolder">Hotmeals</h5>

                        @foreach (var hotmeal in mealsInput)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center p-1 rounded-0">
                                <div>
                                    <div style="width:70px; display:inline-block" class="text-center border border-dark p-2">
                                        @hotmeal.HotMealId
                                    </div>

                                    <i class="fa-solid fa-fill-drip" style="color:@hotmeal.BoxColor"></i>
                                    @hotmeal.HotMealName
                                </div>
                                <div>
                                    <span class="border border-dark p-2">@((hotmeal.HotMealsCartonBoxPick % 1 == 0) ? hotmeal.HotMealsCartonBoxPick.ToString("F0") : hotmeal.HotMealsCartonBoxPick.ToString("F2"))<i class="fa-solid fa-box-open p-1"></i></span>
                                    <span class="border border-dark p-2">@((hotmeal.HotMealsPlasticBoxPick % 1 == 0) ? hotmeal.HotMealsPlasticBoxPick.ToString("F0") : hotmeal.HotMealsPlasticBoxPick.ToString("F2"))  <img src="/css/plastic.png" width="20" /></span>
                                    <span class="border border-dark p-2 fw-bold">@(Math.Ceiling(hotmeal.MealsPick)) pcs</span>
                                    <span class="border border-dark p-2 text-success fw-bold">@hotmeal.HotMealPosition</span>
                                    <span class="border border-dark p-2 text-danger fw-bold">+@hotmeal.PercentageAddExtra%</span>
                                </div>
                            </li>

                        }
                    </ul>
                </div>
            </div>
        </div>
      @*   <div class="row justify-content-center">
            <div class="mt-2" style="width:450px;">
                <div class="border rounded shadow-sm p-3">
                    <small><i class="fa-solid fa-box-open"></i> Carton boxes you need to take out from freezer</small>
                    @*  <br>
                <small><i class="fa-solid fa-boxes-stacked"></i> Leftovers from total number / carton size </small> 
                    <br>
                    <small><img src="/css/plastic.png" width="20" /> Gray plastic box you need to have when finished</small>
                </div>
            </div>
        </div>
 *@

        @* <div class="row justify-content-center text-center mt-3">
            <button class="btn btn-outline-dark" @onclick="Back" style="width:400px;">Go Back</button>

        </div> *@
    }

</div>

@code {


    IEnumerable<MealInfo> availableMeals;

    int state = 0;


    List<Meal> mealsInput = new List<Meal>();

    string firstLink = string.Empty;
    string secondLink = string.Empty;



    protected override async Task OnInitializedAsync()
    {
        await LoadMealsAsync();

        firstLink = "http://aneusacs5ap01p.global.gg.group/norway/htm/pp@osl/" + DateToNumber(DateTime.Now.AddDays(1)) + "/C-2100P.HTM";
        secondLink = "http://aneusacs5ap01p.global.gg.group/norway/htm/pp@osl/" + DateToNumber(DateTime.Now.AddDays(2)) + "/C-1000P.HTM";



    }

    async Task LoadMealsAsync()
    {
        availableMeals = await StorageService.LoadItems();

        if (availableMeals is null)
            return;

        foreach (var meal in availableMeals)
        {
            Meal temp = new Meal
                {
                    BoxId = meal.BoxId,
                    BoxPosition = meal.BoxPosition,
                    BoxName = meal.BoxName,
                    BoxPiecesPerCartonBox = meal.BoxPiecesPerCartonBox,
                    BoxPiecesPerPlasticCase = meal.BoxPiecesPerPlasticCase,
                    BoxColor = meal.BoxColor,
                    HotMealId = meal.HotMealId,
                    HotMealPosition = meal.HotMealPosition,
                    HotMealName = meal.HotMealName,
                    HotMealPiecesPerCartonBox = meal.HotMealPiecesPerCartonBox,
                    HotMealPiecesPerPlasticCase = meal.HotMealPiecesPerPlasticCase
                };


            mealsInput.Add(temp);
        }

        await InvokeAsync(StateHasChanged);
    }

    void AddAmount(Meal meal)
    {
        Console.WriteLine(meal.BoxName);
        meal.FirstDayMealQuantity = meal.FirstDayMealQuantity * 1.15f;
        meal.PercentAdded = true;
        meal.PercentageAddExtra += 10;
        meal.Calculate();
        StateHasChanged();
    }

    void Calculate()
    {
        foreach(var meal in mealsInput)
        {
            meal.Calculate();
            Console.WriteLine(meal.BoxMealsCartonBoxPick + " " + meal.HotMealsCartonBoxPick);
        }

        Burger.TriggerBurgerHide(true);

        state = 1;
    }

    string DateToNumber(DateTime dateTime)
    {
        string year = dateTime.Year.ToString();
        string month = dateTime.Month > 9 ? dateTime.Month.ToString() : $"0{dateTime.Month}";
        string day = dateTime.Day > 9 ? dateTime.Day.ToString() : $"0{dateTime.Day}";
        return year + month + day;
    }

    async Task FirstLink() => await JSRuntime.InvokeVoidAsync("openNewTab", firstLink);
    async Task SecondLink() => await JSRuntime.InvokeVoidAsync("openNewTab", secondLink);
 

    public void Back()
    {
        state = 0;
        Burger.TriggerBurgerHide(false);
    }

    string BoxCalculator(int quantity, int amountInCartonBox)
    {
        float boxes = (float)amountInCartonBox / (float)quantity;
        return boxes.ToString("F2");
    }


}